using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using ViewModels;
using NLog;
using ServiceDAL;
using System.Web.Script.Serialization;
using System.Globalization;

namespace ServiceDAL
{
    public class DuMessageParseDAL : IDuMessageParseDAL
    {
        private static Logger logger = LogManager.GetCurrentClassLogger();
        private FNMA_DU_Entities fnmaDuEntities;
        //---------------------------------------------------------------------------------------------------------------------------------------------------------
        public DuMessageParseDAL()
        {
            this.fnmaDuEntities = new FNMA_DU_Entities(); ;
        }
        //---------------------------------------------------------------------------------------------------------------------------------------------------------
        public void ParseDuMessage(DuMessageModel duMessageModel, int requestResponseId)
        {
            try
            {
                DU_LoanData dbLoanMsgMdl = GenDU_LoanData(duMessageModel, requestResponseId);
                GenDU_Borrower(dbLoanMsgMdl, duMessageModel);
                GenDU_Messages(dbLoanMsgMdl, duMessageModel);
                GenDU_Documents(dbLoanMsgMdl, duMessageModel);
                //----------------------------------------------
                fnmaDuEntities.DU_LoanData.Add(dbLoanMsgMdl);
                fnmaDuEntities.SaveChanges();
            }
            catch (Exception ex)
            {
                logger.Error(ex);
                return;
            }
        }

        //---------------------------------------------------------------------------------------------------------------------------------------------------------
        public DU_LoanData GenDU_LoanData(DuMessageModel duMessageModel, int requestResponseId)
        {
            DateTime outDt;
            duMessageModel.duMessages.submissionDate = duMessageModel.duMessages.submissionDate.LastIndexOf(":") < 12 ?
                    duMessageModel.duMessages.submissionDate.Insert(duMessageModel.duMessages.submissionDate.Length, ":00") : duMessageModel.duMessages.submissionDate;
            DU_LoanData dbLoanMsgMdl = new DU_LoanData()
            {
                caseFileId = duMessageModel.duMessages.caseFileId,
                RequestResponseId = requestResponseId,
                lenderLoanNumber = duMessageModel.duMessages.lenderLoanNumber,
                submissionDate = DateTime.TryParseExact(duMessageModel.duMessages.submissionDate, "yyyyMMdd hh:mm:ss", CultureInfo.InvariantCulture, DateTimeStyles.None, out outDt) ? outDt : (DateTime?)null,
                submissionNumber = duMessageModel.duMessages.submissionNumber,
                submittedBy = duMessageModel.duMessages.submittedBy,
                resultsDateTime = DateTime.TryParseExact(duMessageModel.duMessages.resultsDateTime, "yyyyMMdd hh:mm:ss", CultureInfo.InvariantCulture, DateTimeStyles.None, out outDt) ? outDt : (DateTime?)null,
                paymentShock = duMessageModel.duMessages.analysis.paymentShock,
                reserves = duMessageModel.duMessages.analysis.reserves,
                reserveMonths = duMessageModel.duMessages.analysis.reserveMonths,
                shortage = duMessageModel.duMessages.analysis.shortage,
                netCashBack = duMessageModel.duMessages.analysis.netCashBack,
                cashFromBorrower = duMessageModel.duMessages.analysis.cashFromBorrower,
                housingExpenseRatio = duMessageModel.duMessages.analysis.housingExpenseRatio,
                totalExpenseRatio = duMessageModel.duMessages.analysis.totalExpenseRatio,
                totalExpenseRatioLT10Mos = duMessageModel.duMessages.analysis.totalExpenseRatioLT10Mos,
                totalExpenseRatioUndisclosed = duMessageModel.duMessages.analysis.totalExpenseRatioUndisclosed,
                ltv = duMessageModel.duMessages.analysis.ltv,
                cltv = duMessageModel.duMessages.analysis.cltv,
                qualifyingInterestRate = duMessageModel.duMessages.analysis.qualifyingInterestRate,
                fullyIndexedQualifyingInterestRate = duMessageModel.duMessages.analysis.fullyIndexedQualifyingInterestRate,
                qualifyingPandI = duMessageModel.duMessages.analysis.qualifyingPandI,
                qualifyingRatePaymentShock = duMessageModel.duMessages.analysis.qualifyingRatePaymentShock,
                assetsToVerify = duMessageModel.duMessages.analysis.assetsToVerify,
                reservesToVerify = duMessageModel.duMessages.analysis.reservesToVerify,
                percentSellerContribution = duMessageModel.duMessages.analysis.percentSellerContribution,
                amountSellerContribution = duMessageModel.duMessages.analysis.amountSellerContribution,
                percentBorrowerContribution = duMessageModel.duMessages.analysis.percentBorrowerContribution,
                amountBorrowerContribution = duMessageModel.duMessages.analysis.amountBorrowerContribution,
                undrawnHELOCAmount = duMessageModel.duMessages.analysis.undrawnHELOCAmount,
                closingCostsPaidBySeller = duMessageModel.duMessages.analysis.closingCostsPaidBySeller,
                borrowerFundsPercentToSalesPrice = duMessageModel.duMessages.analysis.borrowerFundsPercentToSalesPrice,
                refinanceAmount = duMessageModel.duMessages.analysis.refinanceAmount,
                cashOnHandRemaining = duMessageModel.duMessages.analysis.cashOnHandRemaining,
                ltvnoFinancedMI = duMessageModel.duMessages.analysis.ltvnoFinancedMI,
                cltvnoFinancedMI = duMessageModel.duMessages.analysis.cltvnoFinancedMI,
                pmimipfundingFee = duMessageModel.duMessages.analysis.pmimipfundingFee,
                combinedLoanAmount = duMessageModel.duMessages.loanDetail.combinedLoanAmount,
                loanTypeCode = duMessageModel.duMessages.loanDetail.loanTypeCode,
                amortizationType = duMessageModel.duMessages.loanDetail.amortizationType,
                amortizationTerm = duMessageModel.duMessages.loanDetail.amortizationTerm,
                purposeofLoan = duMessageModel.duMessages.loanDetail.purposeofLoan,
                purposeofRefi = duMessageModel.duMessages.loanDetail.purposeofRefi,
                interestRate = duMessageModel.duMessages.loanDetail.interestRate,
                subjectPropertyTypeCode = duMessageModel.duMessages.property.subjectPropertyTypeCode,
                propertyStreetAddress = duMessageModel.duMessages.property.propertyStreetAddress,
                propertyCity = duMessageModel.duMessages.property.propertyCity,
                propertyState = duMessageModel.duMessages.property.propertyState,
                propertyZipCode = duMessageModel.duMessages.property.propertyZipCode,
                propertyAppraisedValue = duMessageModel.duMessages.property.propertyAppraisedValue,
                propertyWillBe = duMessageModel.duMessages.property.propertyWillBe,
                numberUnits = duMessageModel.duMessages.property.numberUnits,
                salesPrice = duMessageModel.duMessages.property.salesPrice,
                totalHousingPayment = duMessageModel.duMessages.incomeExpenses.totalHousingPayment,
                totalExpensePayment = duMessageModel.duMessages.incomeExpenses.totalExpensePayment,
                presentHousingExpense = duMessageModel.duMessages.incomeExpenses.presentHousingExpense
            };
            return dbLoanMsgMdl;
        }

        //---------------------------------------------------------------------------------------------------------------------------------------------------------
        public void GenDU_Borrower(DU_LoanData dbLoanMsgMdl, DuMessageModel duMessageModel)
        {
            foreach (Borrower duBorrower in duMessageModel.duMessages.borrowers)
            {
                borrowerCreditScore1 borrCrdtScr = duMessageModel.duMessages.borrowerCreditScore.Where(p => p.applicantID == duBorrower.applicantID).FirstOrDefault();
                if (borrCrdtScr == null) borrCrdtScr = new borrowerCreditScore1();
                //-------------------------------------------
                DU_Borrower duBorrowerMdl = new DU_Borrower()
                {
                    applicantID = duBorrower.applicantID,
                    borrowerName = duBorrower.borrowerName,
                    lastName = duBorrower.lastName,
                    TransUnionScore = borrCrdtScr.creditData.TransUnion,
                    ExperianScore = borrCrdtScr.creditData.Experian,
                    EquifaxScore = borrCrdtScr.creditData.Equifax
                };
                dbLoanMsgMdl.DU_Borrower.Add(duBorrowerMdl);
            }

        }

        //---------------------------------------------------------------------------------------------------------------------------------------------------------
        public void GenDU_Documents(DU_LoanData dbLoanMsgMdl, DuMessageModel duMessageModel)
        {
            foreach (Documentationcodeslist Documentationcodes in duMessageModel.duMessages.documentationCodesList)
            {
                DU_Documents DU_Docs = new DU_Documents()
                {
                    documentationTypeCode = Documentationcodes.documentationTypeCode,
                    documentationLevel = Documentationcodes.documentationLevel,
                    borrowerName = Documentationcodes.borrowerName,
                    applicantID = Documentationcodes.applicantID
                };
                dbLoanMsgMdl.DU_Documents.Add(DU_Docs);
            }

        }

        //---------------------------------------------------------------------------------------------------------------------------------------------------------
        public void GenDU_Messages(DU_LoanData dbLoanMsgMdl, DuMessageModel duMessageModel)
        {
            if (duMessageModel.duMessages == null || duMessageModel.duMessages.messages == null) return;
            //--------------------------------------------
            if (duMessageModel.duMessages.messages.LoanStrengthsWeaknesses != null)
            {
                foreach (LoanStrengthsWeaknesses msgType in duMessageModel.duMessages.messages.LoanStrengthsWeaknesses)
                {
                    DU_Messages DuMessage = new DU_Messages()
                    {
                        lenderMessageLineText = msgType.lenderMessageLine.text,
                        MsgTypeName = "LoanStrengthsWeaknesses",
                        messageID = msgType.messageID,
                        messageName = msgType.messageName,
                        messageSubType1 = msgType.messageSubType1,
                        messageSubType2 = msgType.messageSubType2,
                        messageStructure = msgType.messageStructure
                    };
                    GenDU_MessageData(DuMessage, msgType.lenderParameter, msgType.lenderMessageTableRow, msgType.messageStructure);
                    dbLoanMsgMdl.DU_Messages.Add(DuMessage);
                }
            }
            //--------------------------------------------------
            if (duMessageModel.duMessages.messages.Observations != null)
            {
                foreach (Observation msgType in duMessageModel.duMessages.messages.Observations)
                {
                    DU_Messages DuMessage = new DU_Messages()
                    {
                        lenderMessageLineText = msgType.lenderMessageLine.text,
                        MsgTypeName = "Observation",
                        messageID = msgType.messageID,
                        messageName = msgType.messageName,
                        messageSubType1 = msgType.messageSubType1,
                        messageSubType2 = msgType.messageSubType2,
                        messageStructure = msgType.messageStructure
                    };
                    GenDU_MessageData(DuMessage, msgType.lenderParameter, msgType.lenderMessageTableRow, msgType.messageStructure);
                    dbLoanMsgMdl.DU_Messages.Add(DuMessage);
                }
            }
            //--------------------------------------------------
            if (duMessageModel.duMessages.messages.RiskEligibility != null)
            {
                foreach (RiskEligibility msgType in duMessageModel.duMessages.messages.RiskEligibility)
                {
                    DU_Messages DuMessage = new DU_Messages()
                    {
                        lenderMessageLineText = msgType.lenderMessageLine.text,
                        MsgTypeName = "RiskEligibility",
                        messageID = msgType.messageID,
                        messageName = msgType.messageName,
                        messageSubType1 = msgType.messageSubType1,
                        messageSubType2 = msgType.messageSubType2,
                        messageStructure = msgType.messageStructure
                    };
                    GenDU_MessageData(DuMessage, msgType.lenderParameter, msgType.lenderMessageTableRow, msgType.messageStructure);
                    dbLoanMsgMdl.DU_Messages.Add(DuMessage);
                }
            }
            //--------------------------------------------------
            if (duMessageModel.duMessages.messages.VerificationApprovalConditions != null)
            {
                foreach (VerificationApprovalConditions msgType in duMessageModel.duMessages.messages.VerificationApprovalConditions)
                {
                    DU_Messages DuMessage = new DU_Messages()
                    {
                        lenderMessageLineText = msgType.lenderMessageLine.text,
                        MsgTypeName = "VerificationApprovalConditions",
                        messageID = msgType.messageID,
                        messageName = msgType.messageName,
                        messageSubType1 = msgType.messageSubType1,
                        messageSubType2 = msgType.messageSubType2,
                        messageStructure = msgType.messageStructure
                    };
                    GenDU_MessageData(DuMessage, msgType.lenderParameter, msgType.lenderMessageTableRow, msgType.messageStructure);
                    dbLoanMsgMdl.DU_Messages.Add(DuMessage);
                }
            }
            //--------------------------------------------------
            if (duMessageModel.duMessages.messages.CollateralUnderwriter != null)
            {
                foreach (CollateralUnderwriter msgType in duMessageModel.duMessages.messages.CollateralUnderwriter)
                {
                    DU_Messages DuMessage = new DU_Messages()
                    {
                        lenderMessageLineText = msgType.lenderMessageLine.text,
                        MsgTypeName = "CollateralUnderwriter",
                        messageID = msgType.messageID,
                        messageName = msgType.messageName,
                        messageSubType1 = msgType.messageSubType1,
                        messageSubType2 = msgType.messageSubType2,
                        messageStructure = msgType.messageStructure
                    };
                    GenDU_MessageData(DuMessage, msgType.lenderParameter, msgType.lenderMessageTableRow, msgType.messageStructure);
                    dbLoanMsgMdl.DU_Messages.Add(DuMessage);
                }
            }
            //--------------------------------------------------
            if (duMessageModel.duMessages.messages.LenderGuidanceforApplicants != null)
            {
                foreach (LenderGuidanceforApplicants msgType in duMessageModel.duMessages.messages.LenderGuidanceforApplicants)
                {
                    DU_Messages DuMessage = new DU_Messages()
                    {
                        lenderMessageLineText = msgType.lenderMessageLine.text,
                        MsgTypeName = "LenderGuidanceforApplicants",
                        messageID = msgType.messageID,
                        messageName = msgType.messageName,
                        messageSubType1 = msgType.messageSubType1,
                        messageSubType2 = msgType.messageSubType2,
                        messageStructure = msgType.messageStructure
                    };
                    GenDU_MessageData(DuMessage, msgType.lenderParameter, msgType.lenderMessageTableRow, msgType.messageStructure);
                    dbLoanMsgMdl.DU_Messages.Add(DuMessage);
                }
            }
            //--------------------------------------------------
            if (duMessageModel.duMessages.messages.PotentialRedFlags != null)
            {
                foreach (PotentialRedFlags msgType in duMessageModel.duMessages.messages.PotentialRedFlags)
                {
                    DU_Messages DuMessage = new DU_Messages()
                    {
                        lenderMessageLineText = msgType.lenderMessageLine.text,
                        MsgTypeName = "PotentialRedFlags",
                        messageID = msgType.messageID,
                        messageName = msgType.messageName,
                        messageSubType1 = msgType.messageSubType1,
                        messageSubType2 = msgType.messageSubType2,
                        messageStructure = msgType.messageStructure
                    };
                    GenDU_MessageData(DuMessage, msgType.lenderParameter, msgType.lenderMessageTableRow, msgType.messageStructure);
                    dbLoanMsgMdl.DU_Messages.Add(DuMessage);
                }
            }
        }

        //---------------------------------------------------------------------------------------------------------------------------------------------------------
        public void GenDU_MessageData(DU_Messages DuMessage, Lenderparameter[] LndrParamCol, Lendermessagetablerow[] LndrMsgRowCol, string msgStructure)
        {
            if (msgStructure == "Fixed") return;
            //---------------------------
            DU_Message_Data DU_MsgData;
            List<string> headerLst = new List<string>();
            bool isMsgStrusctList = msgStructure == "List" ? true : false;
            //---------------------------
            //Get the 1st columnCol and use as param names
            if (isMsgStrusctList && LndrMsgRowCol.Count() > 0 && LndrMsgRowCol[0] != null && LndrMsgRowCol[0].column.Count() > 0)
            {
                foreach (Column col in LndrMsgRowCol[0].column)
                {
                    headerLst.Add(col.value);
                }
            }
            //-------------------------------------------------"Parametric"
            foreach (Lenderparameter LndrParam in LndrParamCol)
            {
                if (LndrParam.parameterNumber == 0) continue;
                //-------------------------------------------
                DU_MsgData = new DU_Message_Data()
                {
                    parameterNumber = LndrParam.parameterNumber,
                    parameterName = LndrParam.parameterName == null && isMsgStrusctList && headerLst.Count() > 0 ? 
                                    headerLst[LndrParam.parameterNumber - 1] : LndrParam.parameterName,
                    parameterValue = LndrParam.parameterValue
                };
                DuMessage.DU_Message_Data.Add(DU_MsgData);
            }
        }
    }
}
